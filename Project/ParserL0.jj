PARSER_BEGIN(Parser)

import java.util.*;

public class Parser {
}

PARSER_END(Parser)

SKIP :
{
  " "
| "\t"
| "\r"
| "\n"
}

SKIP :
{
    "/*" : IN_COMMENT
}

<IN_COMMENT>
SKIP :
{
    < ~[] >
|   "*/" : DEFAULT
}

TOKEN :
{

  < NIL : "nil" >
  |
  < CONS: "::" >
  |
  < LAZYCONS: ":?">
  |
  < MATCH: "match" >
  |
  < BAR : "|" >
  |
  < SARROW: "->" >
  |
  < LET : "let" >
  |
  < TYPE : "type" >
  |
  < TRUE: "true" >
  |
  < FALSE: "false" >
  |
  < PLUS : "+" >
  |
  < MINUS : "-">
  |
  < STAR : "*">
  |
  < DIV : "/">
  |
  < LPAR : "(" >
  |
  < RPAR : ")" >
  |
  < LBRA : "{" >
  |
  < RBRA : "}" >
  |
  < EQUAL : "=" >
  |
  < DOT : "." >
  |
  < COLON : ":" >
  |
  < SEMIC : ";" >
  |
  < TERM : ";;" >
  |
  < COMMA : "," >
  |
  < AND : "&&" >
  |
  < OR : "||" >
  |
  < EQ : "==" >
  |  
  < GT : ">" >
  |
  < LT : "<" >
  |
  < GTEQ : ">=" >
  |
  < LTEQ : "<=" >
  |
  < DIF : "~=" >
  |
  < NOT : "~" >
  |
  < ASSIGN : ":=" >
  |
  < BOX : "box" >
  |
  < IF : "if" >
  |
  < ELSE : "else" >
  |
  < WHILE : "while" >
  |
  < PRINT : "print" >
  |
  < PRINTLN : "println" >
  |
  < FN : "fn" >
  |
  < ARROW : "=>" >
  |
  <INT  : "int">
  |
  <UNIT  : "()">
  |
  <BOOL  : "bool">
  |
  <STRING  : "string">  
  |
  <LIST  : "list">  
  |
  <REF  : "ref">  
  |
  <UNION  : "union">  
  |
  <STRUCT  : "struct">  
  |
  < String: "\"" ( (~["\"","\\"]) | ("\\" ( ["n","t","b","r","f","\\","\""] ) ) )* "\"" >
  |
  < Label: "#" (["a"-"z","A"-"Z", "0"-"9", "_"])+ >
  |
  < Id: ["a"-"z","A"-"Z","_"] ( ["a"-"z","A"-"Z","0"-"9","_"] )* >
  |
  < Num: (["0"-"9"]) + >
}

ASTNode Start():
{ ASTNode t; }
{
    <EOF> {return null;}
  | t = Let() <TERM> { return t; }
}

ASTNode Let() :
{
  Token n;
  ASTNode e1, body;
  ASTType t1 = null;
  List<Bind> decls = new ArrayList<Bind>();
  List<Bind> types = new ArrayList<Bind>();
}
{
    (
        (
          <TYPE> n=<Id> <EQUAL> t1 = Type() <SEMIC>
          { types.add(new Bind(n.image, null, t1)); t1 = null; }
        )*
        (
          <LET> n=<Id> [<COLON> t1 = Type()] <EQUAL> e1 = BA() <SEMIC>
          { decls.add(new Bind(n.image, e1, t1)); t1 = null; }
        )* 
        body = Seq()
      { return new ASTLetAndType(decls, types, body); }
    )
}


ASTNode Seq() :
{Token op;
  ASTNode t1, t2;}
{
     t1 = SeqExp() ( ( op=<SEMIC> ) t2 = SeqExp() 
 		 {
      t1 = new ASTSeq(t1, t2);
     } 
		)*
     { return t1; }  
}

ASTNode SeqExp() :
{Token op;
  ASTNode t1, t2;}
{
     t1 = BA() ( ( op=<ASSIGN> ) t2 = BA() 
 		 {
      t1 = new ASTSeqExp(t1, t2);
     } 
		)*
     { return t1; }  
}

ASTNode BA() :
{Token op;
  ASTNode t1, t2;}
{
     t1 = BM() ( ( op=<OR> ) t2 = BM() 
 		 {
      t1 = new ASTBExp(t1, op.image, t2);
		 } 
		)*
     { return t1; } 
}

ASTNode BM() :
{Token op;
  ASTNode t1, t2;}
{
     t1 = Rel() ( ( op=<AND> ) t2 = Rel() 
 		 {
      t1 = new ASTBExp(t1, op.image, t2);
 		 } 
		)*
     { return t1; } 
}


ASTNode Rel() :
{Token op;
  ASTNode t1, t2;}
{
     t1 = Exp() ( ( op=<EQ> | op=<GT> | op=<LT> | op=<GTEQ> | op=<LTEQ> | op=<DIF>) t2 = Exp() 
     	  	  {
              t1 = new ASTComp(t1, op.image, t2);
		   } 
		)?
     { return t1; } 
}

ASTNode Exp() :
{
    ASTNode t1, t2;
}
{
    t1 = Term() (
        <PLUS> t2 = Term() { t1 = new ASTPlus(t1, t2); }
      | <MINUS> t2 = Term() { t1 = new ASTSub(t1, t2); }
    )*
    { return t1; }
}


ASTNode Term() :
{
    ASTNode t1, t2;
    Token op;
}
{
    t1 = FactorWithFields() (
        <CONS> t2 = FactorWithFields() { t1 = new ASTCons(t1, t2, false); }
      | <LAZYCONS> t2 = FactorWithFields() { t1 = new ASTCons(t1, t2, true); }
      | (
        op=<STAR> t2 = FactorWithFields() { t1 = new ASTMult(t1,t2); }
      | op=<DIV> t2 = FactorWithFields() { t1 = new ASTDiv(t1,t2); }
      | op = <UNIT> { t1 = new ASTApp(t1, new ASTUnit()); }
      | op = <LPAR> t2 = BA() <RPAR> { t1 = new ASTApp(t1, t2); }

    )*
    ) { return t1; }
}

ASTNode FactorWithFields() :
{
    ASTNode t1;
    Token op;
}
{
    t1 = Fact() (
        <DOT> op = <Label> { t1 = new ASTFieldSelect(t1, op.image); }
    )*
    { return t1; }
}


ASTNode Fact() :
{ Token n, m; 
  ASTNode t, e1, e2;
  List<Bind> decls;
  ASTNode  body, alt;
  ASTType at;
}
{
   (
      n=<Num> { t = new ASTInt(Integer.parseInt(n.image)); } 
    | n=<TRUE> { t = new ASTTrue(); }
    | n=<FALSE> {  t = new ASTFalse();}
    | n=<Label> <LPAR> e1 = BA() <RPAR> { t = new ASTUnion(n.image, e1); }
    | n=<Id> { t = new ASTId(n.image); } 
    | <BOX> t=Fact() {  t = new ASTBox(t); }
    | <STAR> t=Fact() { t = new ASTStar(t); }
    | n=<String> { t = new ASTString(n.image.substring(1, n.image.length()-1)); }
    | <MINUS> t=Fact() { t = new ASTNeg(t); }
    | <NOT> t=Fact() {t = new ASTNot(t);  }
    | <IF> t=BA() <LBRA> e1=Let() <RBRA> <ELSE> <LBRA> e2=Let() <RBRA> { t = new ASTIf(t, e1, e2); }
    | <WHILE> t=BA() <LBRA> body=Let() <RBRA> { t = new ASTWhile(t, body); }
    | t = Fun()
    | <PRINT> t=Fact() { t = new ASTPrint(t);  }
    | <PRINTLN> t=Fact() { t = new ASTPrintln(t);  }
    |  <LPAR> t=Let() <RPAR> 
    | <NIL> { t = new ASTNil(); }
    | t = MatchTerm()
    | t = RecordTerm()
    | <UNIT> { t = new ASTUnit(); }
    )

   { return t; }
}

ASTNode Fun() : 
{
Token n; 
ASTNode t, e1=null, e2;
ASTType at;
}
{
      <FN> n=<Id> <COLON> at = Type()
      { t = new ASTFun(n.image, null, at); e1 = t;}
      ( <COMMA> n = <Id> <COLON> at = Type() { e2 = new ASTFun(n.image, null, at);
		  ((ASTFun)e1).setBody(e2); e1 = e2; })*
		  <ARROW> <LBRA> e2 = Let() <RBRA> { ((ASTFun)e1).setBody(e2);}
      { return t; } 
}


ASTNode MatchTerm() :
{
  Token n, m;
  ASTNode t, e1, e2;
  ArrayList<String> labels;
  ArrayList<String> vars;
  ArrayList<ASTNode> bodies;
}
{
  <MATCH> t=Let() <LBRA>
    (
      <NIL> <SARROW> e1=Let()
      <BAR> n=<Id> <CONS> m=<Id> <SARROW> e2=Let() <RBRA>
        { t = new ASTMatch(t, e1, n.image, m.image, e2); }
    |
      n = <Label> <LPAR> m = <Id> <RPAR> <SARROW> e1=Let()
      {
        labels = new ArrayList<String>();
        vars = new ArrayList<String>();
        bodies = new ArrayList<ASTNode>();
        labels.add(n.image);
        vars.add(m.image);
        bodies.add(e1);
      }
      (
        <BAR> n = <Label> <LPAR> m = <Id> <RPAR> <SARROW> e2 = Let()
        {
          labels.add(n.image);
          vars.add(m.image);
          bodies.add(e2);
        }
      )*
      <RBRA>
      { t = new ASTMatchUnion(t, labels, vars, bodies); }
    )
  { return t; }
}

ASTNode RecordTerm() :
{
    Token lbl;
    ASTNode value;
    HashMap<String, ASTNode> fields = new HashMap<String, ASTNode>();
    ASTNode t;
}
{
    <LBRA>
    (
        lbl = <Label> <EQUAL> value = BA() { fields.put(lbl.image, value); }
        ( <COMMA> lbl = <Label> <EQUAL> value = BA() { fields.put(lbl.image, value); } )*
    )?
    <RBRA>
    { t = new ASTStruct(fields); }
    { return t; }
}


ASTType Type() : 
{
  ASTType t1, t2;
}
{        
    t1 = TypeF() (<SARROW> t2 = Type() { t1 = new ASTTArrow(t1,t2);} )?
    { return t1; }
}

TypeBindList LabelList() :
{
  ASTType t;
  HashMap<String,ASTType> ll;
  Token n;
}
{   { ll = new HashMap<String,ASTType>() ; }
    ( n=<Label>  <COLON> t = Type() { ll.put(n.image,t); } 
              (<COMMA> n=<Label>  <COLON> t = Type() { ll.put(n.image,t);} )*
    )?
    { return new TypeBindList(ll); }
}

ASTType TypeF() : 
{
  ASTType t;
  TypeBindList ll;
  Token n;
}
{        
    ( 
          <INT> { t = new ASTTInt(); } 
        | n=<Id> { t = new ASTTId(n.image); } 
        | <BOOL> { t = new ASTTBool(); } 
        | <UNIT> { t = new ASTTUnit(); } 
        | <STRING> { t = new ASTTString(); } 
        | <REF> <LT> t=Type() <GT> { t = new ASTTRef(t); }
        | <LIST> <LT> t=Type() <GT> { t = new ASTTList(t); }
        | <STRUCT> <LBRA> ll = LabelList() <RBRA> { t = new ASTTStruct(ll);}
        | <UNION> <LBRA> ll = LabelList() <RBRA> { t = new ASTTUnion(ll);}
        | <LPAR> t=Type() <RPAR>
    )
    { return t; }
}